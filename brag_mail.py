#!/usr/bin/env python3
# coding=utf-8
"""
Sends BRAG reminders via Mandrill
"""
from __future__ import unicode_literals
from __future__ import absolute_import
import mandrill
from brag import Brag
import os
import argparse

__author__ = "Manuel Ebert"
__copyright__ = "Copyright 2016, Manuel Ebert"
__date__ = "2016-02-22"
__email__ = "manuel@1450.,e"

TEMPLATE = """
Dear {username},

Today is Thursday, two more days to get your shit together and be productive. Gentle automated reminder, here are your tasks for this week:

{tasks}

This email was automatically generated by BRAGMaster 3000 - https://github.com/maebert/bragmaster
"""


def send_tasks(user, session, mandrill_client, dry_run=False):
    """Sends email to user with their current tasks/"""
    if not user.email:
        print("No e-mail address provided for {}.".format(user.name))
        return

    print("- Scheduling email to {}...".format(user.name))

    user_session = user.get_session(session)
    if not user_session:
        print("  - User didn't contribute to this session")
        return

    tasks = user_session.to_string(simple=True, title=False)

    message = {
        'from_email': 'manuel@1450.me',
        'from_name': 'Manuel Ebert',
        'text': TEMPLATE.format(username=user.name, tasks=tasks),
        'subject': "Brag reminder - Session {}".format(len(brag.get_session_names())),
        'to': [{'email': user.email,
                'name': user.name,
                'type': 'to'}]
    }
    if not dry_run:
        result = mandrill_client.messages.send(message=message)
        if result[0].get("reject_reason"):
            print("  - ERROR: {}".format(result[0]['reject_reason']))
        else:
            print("  - OK")
    else:
        print("  - This is a dry run.")


if __name__ == "__main__":
    commands = ['current', 'last', 'template', 'stats', 'users', 'update']
    brag_file = os.environ.get('BRAG_FILE', None)
    mandrill_key = os.environ.get('MANDRILL_KEY', None)

    parser = argparse.ArgumentParser(description='Business Re-Evaluation and Enhancement Group helper')
    parser.add_argument('-f', '--file', default=brag_file, help='Path to brag file', required=not brag_file)
    parser.add_argument('-k', '--key', dest="mandrill_key", default=mandrill_key, help='Mandrill API key', required=not mandrill_key)
    parser.add_argument('-u', '--users', help='Filter by users, separate multiple users with commas.')
    parser.add_argument('-t', '--try', dest="dry_run", action='store_true', help="Don't actually send mail.")
    args = parser.parse_args()

    brag = Brag.from_file(args.file)

    if args.users:
        usernames = args.users.lower().split(",")
        brag.users = [u for u in brag.users if u.name.lower() in usernames]

    mandrill_client = mandrill.Mandrill(args.mandrill_key)
    current_session = max(brag.get_session_names())

    print("Sending 'Brag reminder - Session {}'".format(len(brag.get_session_names())))
    for user in brag.users:
        send_tasks(user, current_session, mandrill_client, dry_run=args.dry_run)
